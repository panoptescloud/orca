// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package tls_mocks

import (
	"github.com/panoptescloud/orca/internal/common"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWorkspaceRepo creates a new instance of MockWorkspaceRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkspaceRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkspaceRepo {
	mock := &MockWorkspaceRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWorkspaceRepo is an autogenerated mock type for the workspaceRepo type
type MockWorkspaceRepo struct {
	mock.Mock
}

type MockWorkspaceRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkspaceRepo) EXPECT() *MockWorkspaceRepo_Expecter {
	return &MockWorkspaceRepo_Expecter{mock: &_m.Mock}
}

// Load provides a mock function for the type MockWorkspaceRepo
func (_mock *MockWorkspaceRepo) Load(name string) (*common.Workspace, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 *common.Workspace
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*common.Workspace, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *common.Workspace); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.Workspace)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkspaceRepo_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockWorkspaceRepo_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - name string
func (_e *MockWorkspaceRepo_Expecter) Load(name interface{}) *MockWorkspaceRepo_Load_Call {
	return &MockWorkspaceRepo_Load_Call{Call: _e.mock.On("Load", name)}
}

func (_c *MockWorkspaceRepo_Load_Call) Run(run func(name string)) *MockWorkspaceRepo_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWorkspaceRepo_Load_Call) Return(workspace *common.Workspace, err error) *MockWorkspaceRepo_Load_Call {
	_c.Call.Return(workspace, err)
	return _c
}

func (_c *MockWorkspaceRepo_Load_Call) RunAndReturn(run func(name string) (*common.Workspace, error)) *MockWorkspaceRepo_Load_Call {
	_c.Call.Return(run)
	return _c
}
